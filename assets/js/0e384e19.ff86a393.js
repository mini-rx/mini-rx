"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[671],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),d=r,k=p["".concat(s,".").concat(d)]||p[d]||m[d]||o;return n?a.createElement(k,i(i({ref:t},c),{},{components:n})):a.createElement(k,i({ref:t},c))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9881:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const o={id:"intro",title:"Quick Start",sidebar_label:"Quick Start",slug:"/intro"},i=void 0,l={unversionedId:"intro",id:"intro",title:"Quick Start",description:"MiniRx Store provides Reactive State Management, powered by RxJS.",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/docs/intro",draft:!1,editUrl:"https://github.com/spierala/mini-rx-store/edit/master/docs/docs/intro.md",tags:[],version:"current",frontMatter:{id:"intro",title:"Quick Start",sidebar_label:"Quick Start",slug:"/intro"},sidebar:"docs",next:{title:"Installation & TypeScript Config",permalink:"/docs/"}},s={},u=[{value:"What&#39;s Included",id:"whats-included",level:2},{value:"Key Concepts",id:"key-concepts",level:2},{value:"Basic Tutorial",id:"basic-tutorial",level:2},{value:"Store (Redux)",id:"store-redux",level:3},{value:"Feature Store",id:"feature-store",level:3},{value:"Component Store",id:"component-store",level:3},{value:"Demos",id:"demos",level:2}],c={toc:u},p="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"MiniRx Store provides ",(0,r.kt)("strong",{parentName:"p"},"Reactive State Management"),", powered by ",(0,r.kt)("a",{parentName:"p",href:"https://rxjs.dev/"},(0,r.kt)("strong",{parentName:"a"},"RxJS")),".\nIt is a ",(0,r.kt)("strong",{parentName:"p"},"highly flexible")," solution and ",(0,r.kt)("strong",{parentName:"p"},"scales")," with your state management needs:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Manage ",(0,r.kt)("strong",{parentName:"li"},"global")," state at large scale with the ",(0,r.kt)("strong",{parentName:"li"},"Store (Redux) API")),(0,r.kt)("li",{parentName:"ul"},"Manage ",(0,r.kt)("strong",{parentName:"li"},"global")," state with a minimum of boilerplate using ",(0,r.kt)("strong",{parentName:"li"},"Feature Stores")),(0,r.kt)("li",{parentName:"ul"},"Manage ",(0,r.kt)("strong",{parentName:"li"},"local")," component state with ",(0,r.kt)("strong",{parentName:"li"},"Component Stores"))),(0,r.kt)("p",null,"MiniRx always tries to find the sweet spot between ",(0,r.kt)("strong",{parentName:"p"},"powerful, simple and lightweight"),"."),(0,r.kt)("h2",{id:"whats-included"},"What's Included"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"RxJS powered global state management"),(0,r.kt)("li",{parentName:"ul"},"State and actions are exposed as RxJS Observables"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"redux"},"Store (Redux)"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Actions"),(0,r.kt)("li",{parentName:"ul"},"Reducers"),(0,r.kt)("li",{parentName:"ul"},"Meta Reducers"),(0,r.kt)("li",{parentName:"ul"},"Memoized Selectors"),(0,r.kt)("li",{parentName:"ul"},"Effects"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"mapResponse")," operator: handle the side effect response in Effects"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"ts-action"},"Support for ts-action"),": Create actions and reducers more efficiently"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"fs-quick-start"},"Feature Store"),": Manage feature state directly with a minimum of boilerplate:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"setState()")," update the feature state"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"setInitialState()")," initialize state lazily"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"select()")," select state from the feature state object as RxJS Observable"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"effect()")," run side effects like API calls and update feature state"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"undo()")," easily undo setState actions (requires the UndoExtension)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"destroy()")," remove the feature state from the global state object"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tapResponse")," operator: handle the side effect response in Feature Store ",(0,r.kt)("inlineCode",{parentName:"li"},"effect")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"component-store"},"Component Store"),": Manage state locally:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Component Store is perfect for local component state"),(0,r.kt)("li",{parentName:"ul"},"Component Store has the same simple API as Feature Store (",(0,r.kt)("inlineCode",{parentName:"li"},"setState"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"select"),", ...)"),(0,r.kt)("li",{parentName:"ul"},"Component Store state is independent of the global state object"),(0,r.kt)("li",{parentName:"ul"},"Component Store is destroyable"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"ext-quick-start"},"Extensions"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Redux DevTools Extension: Inspect global state with the Redux DevTools"),(0,r.kt)("li",{parentName:"ul"},"Immutable Extension: Enforce state immutability"),(0,r.kt)("li",{parentName:"ul"},"Undo Extension: Undo dispatched actions"),(0,r.kt)("li",{parentName:"ul"},"Logger Extension: console.log the current action and updated state"))),(0,r.kt)("li",{parentName:"ul"},"Framework-agnostic: MiniRx works with any frontend project built with JavaScript or TypeScript (Angular, Svelte, React, Vue, or anything else)"),(0,r.kt)("li",{parentName:"ul"},"TypeScript support: The MiniRx API comes with TypeScript type definitions"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"angular"},"Angular Integration"),": Use MiniRx Store the Angular way:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Configure the Store with ",(0,r.kt)("inlineCode",{parentName:"li"},"StoreModule.forRoot()")),(0,r.kt)("li",{parentName:"ul"},"Add feature state with ",(0,r.kt)("inlineCode",{parentName:"li"},"StoreModule.forFeature()")),(0,r.kt)("li",{parentName:"ul"},"Inject ",(0,r.kt)("inlineCode",{parentName:"li"},"Store")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Actions"))))),(0,r.kt)("h2",{id:"key-concepts"},"Key Concepts"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"State and actions are exposed as ",(0,r.kt)("strong",{parentName:"li"},"RxJS Observables")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Single source of truth"),": The Store holds a single object which represents the ",(0,r.kt)("strong",{parentName:"li"},"global")," application state"),(0,r.kt)("li",{parentName:"ul"},"The global state has a ",(0,r.kt)("strong",{parentName:"li"},"flat hierarchy"),' and is divided into "feature states" (also called "slices" in Redux world)'),(0,r.kt)("li",{parentName:"ul"},'For each "feature state" we can decide to use the ',(0,r.kt)("inlineCode",{parentName:"li"},"Store")," (Redux) API with actions and reducers or the simplified ",(0,r.kt)("inlineCode",{parentName:"li"},"FeatureStore")," API"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Store")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"FeatureStore")," are different APIs for one and the same Redux store"),(0,r.kt)("li",{parentName:"ul"},"Use ",(0,r.kt)("inlineCode",{parentName:"li"},"ComponentStore")," to manage state which is independent of the global state object"),(0,r.kt)("li",{parentName:"ul"},"State is ",(0,r.kt)("strong",{parentName:"li"},"read-only")," (immutable) and can only be changed by dispatching actions (Redux API) or by using ",(0,r.kt)("inlineCode",{parentName:"li"},"setState")," (Feature Store/ Component Store)")),(0,r.kt)("h2",{id:"basic-tutorial"},"Basic Tutorial"),(0,r.kt)("p",null,"Let's dive into some code to see MiniRx in action. You can play with the tutorial code on ",(0,r.kt)("a",{parentName:"p",href:"https://stackblitz.com/edit/mini-rx-store-basic-tutorial?file=index.ts"},"StackBlitz"),"."),(0,r.kt)("h3",{id:"store-redux"},"Store (Redux)"),(0,r.kt)("p",null,"MiniRx supports the classic Redux API with registering reducers and dispatching actions.\nObservable state can be selected with memoized selectors."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import {\n  Action,\n  Store,\n  configureStore,\n  createFeatureStateSelector,\n  createSelector\n} from 'mini-rx-store';\nimport { Observable } from 'rxjs';\n\n// 1.) State interface\ninterface CounterState {\n  count: number;\n}\n\n// 2.) Initial state\nconst counterInitialState: CounterState = {\n  count: 1\n};\n\n// 3.) Reducer\nfunction counterReducer(\n  state: CounterState = counterInitialState,\n  action: Action\n): CounterState {\n  switch (action.type) {\n    case 'inc':\n      return {\n        ...state,\n        count: state.count + 1\n      };\n    default:\n      return state;\n  }\n}\n\n// 4.) Get hold of the store instance and register root reducers\nconst store: Store = configureStore({\n  reducers: {\n    counter: counterReducer\n  }\n});\n\n// 5.) Create memoized selectors\nconst getCounterFeatureState = createFeatureStateSelector<CounterState>('counter');\nconst getCount = createSelector(\n  getCounterFeatureState,\n  state => state.count\n);\n\n// 6.) Select state as RxJS Observable\nconst count$: Observable<number> = store.select(getCount);\ncount$.subscribe(count => console.log('count:', count));\n// OUTPUT: count: 1\n\n// 7.) Dispatch an action\nstore.dispatch({ type: 'inc' });\n// OUTPUT: count: 2\n")),(0,r.kt)("h3",{id:"feature-store"},"Feature Store"),(0,r.kt)("p",null,"With MiniRx Feature Stores we can manage feature state directly with a minimum of boilerplate."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="counter-feature-store.ts"',title:'"counter-feature-store.ts"'},"import { FeatureStore } from 'mini-rx-store';\nimport { Observable } from 'rxjs';\n\n// State interface\ninterface CounterState {\n  count: number;\n}\n\n// Initial state\nconst counterInitialState: CounterState = {\n  count: 11\n};\n\n// Extend FeatureStore and pass the State interface\nexport class CounterFeatureStore extends FeatureStore<CounterState> {\n  // Select state as RxJS Observable\n  count$: Observable<number> = this.select(state => state.count);\n\n  constructor() {\n    // Call super with the feature key and the initial state\n    super('counterFs', counterInitialState);\n  }\n\n  // Update state with `setState`\n  inc() {\n    this.setState(state => ({ count: state.count + 1 }));\n  }\n}\n")),(0,r.kt)("p",null,'Use the "CounterFeatureStore" like this:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { CounterFeatureStore } from \"./counter-feature-store\";\n\nconst counterFs = new CounterFeatureStore();\ncounterFs.count$.subscribe(count => console.log('count:', count));\n// OUTPUT: count: 11\n\ncounterFs.inc();\n// OUTPUT: count: 12\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"The state of a Feature Store becomes part of the global state")),(0,r.kt)("p",{parentName:"admonition"},"Every new Feature Store will show up in the global state with the corresponding feature key (e.g. 'counterFs'):"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'store.select(state => state).subscribe(console.log);\n// OUTPUT: {"counter":{"count":2},"counterFs":{"count":12}}\n'))),(0,r.kt)("h3",{id:"component-store"},"Component Store"),(0,r.kt)("p",null,"Manage state locally and independently of the global state object.\nComponent Store has the identical API as Feature Store."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { ComponentStore } from 'mini-rx-store';\nimport { Observable } from 'rxjs';\n\n// State interface\ninterface CounterState {\n  count: number;\n}\n\n// Initial state\nconst counterInitialState: CounterState = {\n  count: 111,\n};\n\n// Extend ComponentStore and pass the State interface\nexport class CounterComponentStore extends ComponentStore<CounterState> {\n  // Select state as RxJS Observable\n  count$: Observable<number> = this.select((state) => state.count);\n\n  constructor() {\n    // Call super with the initial state\n    super(counterInitialState);\n  }\n\n  // Update state with `setState`\n  inc() {\n    this.setState((state) => ({ count: state.count + 1 }));\n  }\n}\n")),(0,r.kt)("p",null,'Use the "CounterComponentStore" like this:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const counterCs = new CounterComponentStore();\ncounterCs.count$.subscribe(count => console.log('count:', count));\n// OUTPUT: count: 111\n\ncounterCs.inc();\n// OUTPUT: count: 112\n")),(0,r.kt)("h2",{id:"demos"},"Demos"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://stackblitz.com/edit/mini-rx-store-basic-tutorial?file=index.ts"},"MiniRx Store - Basic Tutorial"),": See the basic tutorial in action"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://angular-demo.mini-rx.io"},"MiniRx Store Angular Demo")," (",(0,r.kt)("a",{parentName:"li",href:"https://github.com/spierala/mini-rx-store/tree/master/apps/mini-rx-angular-demo"},"source code"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://svelte-demo.mini-rx.io"},"MiniRx Store Svelte Demo")," (",(0,r.kt)("a",{parentName:"li",href:"https://github.com/spierala/mini-rx-svelte-demo"},"source code"),")")))}m.isMDXComponent=!0}}]);