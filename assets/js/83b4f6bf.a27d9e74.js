"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[546],{6464:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>l,frontMatter:()=>d,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"reducers","title":"Reducers","description":"Reducers specify how the feature state changes in response to actions sent to the store.","source":"@site/docs/reducers.md","sourceDirName":".","slug":"/reducers","permalink":"/docs/reducers","draft":false,"unlisted":false,"editUrl":"https://github.com/spierala/mini-rx-store/edit/master/docs/docs/reducers.md","tags":[],"version":"current","frontMatter":{"id":"reducers","title":"Reducers","slug":"/reducers"},"sidebar":"docs","previous":{"title":"Actions","permalink":"/docs/actions"},"next":{"title":"Selectors","permalink":"/docs/selectors"}}');var r=o(4848),s=o(8453);const d={id:"reducers",title:"Reducers",slug:"/reducers"},c=void 0,i={},a=[{value:"Register feature reducer",id:"register-feature-reducer",level:3},{value:"Option 1: Store Config",id:"option-1-store-config",level:4},{value:"Option 2: Add feature reducers dynamically",id:"option-2-add-feature-reducers-dynamically",level:4},{value:"Update State",id:"update-state",level:3}];function u(e){const t={code:"code",em:"em",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"Reducers specify how the feature state changes in response to actions sent to the store.\nA reducer function typically looks like this:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="todo-reducer.ts"',children:"import { Todo } from './todo';\nimport { TodoActionTypes, TodoActions } from './todo-actions';\n\nexport interface TodoState {\n  todos: Todo[];\n  selectedTodoId: number\n}\n\nexport const initialState: TodoState = {\n  todos: [],\n  selectedTodoId: undefined\n};\n\nexport function todoReducer(\n  state: TodoState = initialState,\n  action: TodoActions\n): TodoState {\n  switch (action.type) {\n    case TodoActionTypes.AddTodo:\n      return {\n        ...state,\n        todos: [...state.todos, action.payload]\n      };\n    case TodoActionTypes.RemoveTodo:\n      return {\n        ...state,\n        todos: state.todos.filter(item => item.id !== action.payload)\n      };\n    default:\n      return state;\n  }\n}\n"})}),"\n",(0,r.jsx)(t.h3,{id:"register-feature-reducer",children:"Register feature reducer"}),"\n",(0,r.jsx)(t.p,{children:"Before we can update state by dispatching actions, we need to add the reducer to the store.\nThere are two options to register a feature reducer:"}),"\n",(0,r.jsx)(t.h4,{id:"option-1-store-config",children:"Option 1: Store Config"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"import { configureStore, Store } from 'mini-rx-store';\nimport todoReducer from './todo-reducer';\n\nconst store: Store = configureStore({\n  reducers: {\n    todo: todoReducer\n  }\n});\n"})}),"\n",(0,r.jsx)(t.p,{children:"Like this, the reducers are ready when the store is initialized."}),"\n",(0,r.jsx)(t.h4,{id:"option-2-add-feature-reducers-dynamically",children:"Option 2: Add feature reducers dynamically"}),"\n",(0,r.jsxs)(t.p,{children:["We can add feature reducers at any time with ",(0,r.jsx)(t.code,{children:"store.feature"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"import todoReducer from './todo-reducer';\n\nstore.feature('todo', todoReducer)\n"})}),"\n",(0,r.jsx)(t.h3,{id:"update-state",children:"Update State"}),"\n",(0,r.jsxs)(t.p,{children:["Now we are all set for updating the ",(0,r.jsx)(t.em,{children:"todos"})," feature state.\nLet's dispatch the ",(0,r.jsx)(t.code,{children:"AddTodo"})," action:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:'store.dispatch(new AddTodo({id: 1, title: \'Use Redux\'}));\n\nstore.select(state => state).subscribe(console.log); \n// Output: {"todo":{"todos":[{id: 1, title: "Use Redux"}]}}\n'})}),"\n",(0,r.jsxs)(t.p,{children:["Yes, we did it! The todoReducer processed the action, and the new todo landed in the ",(0,r.jsx)(t.code,{children:"todos"})," array."]})]})}function l(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>d,x:()=>c});var n=o(6540);const r={},s=n.createContext(r);function d(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);