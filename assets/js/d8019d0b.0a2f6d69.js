"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[650],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>m});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},s=Object.keys(e);for(o=0;o<s.length;o++)r=s[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)r=s[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=o.createContext({}),i=function(e){var t=o.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},d=function(e){var t=i(e.components);return o.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=i(r),m=n,f=p["".concat(l,".").concat(m)]||p[m]||u[m]||s;return r?o.createElement(f,a(a({ref:t},d),{},{components:r})):o.createElement(f,a({ref:t},d))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=r.length,a=new Array(s);a[0]=p;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:n,a[1]=c;for(var i=2;i<s;i++)a[i]=r[i];return o.createElement.apply(null,a)}return o.createElement.apply(null,r)}p.displayName="MDXCreateElement"},839:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>c,toc:()=>i});var o=r(7462),n=(r(7294),r(3905));const s={id:"selectors",title:"Selectors",sidebar_label:"Selectors",slug:"/selectors"},a=void 0,c={unversionedId:"selectors",id:"selectors",title:"Selectors",description:"Selectors are used to select a specific piece of state.",source:"@site/docs/selectors.md",sourceDirName:".",slug:"/selectors",permalink:"/docs/selectors",draft:!1,editUrl:"https://github.com/spierala/mini-rx-store/edit/master/docs/docs/selectors.md",tags:[],version:"current",frontMatter:{id:"selectors",title:"Selectors",sidebar_label:"Selectors",slug:"/selectors"},sidebar:"docs",previous:{title:"Reducers",permalink:"/docs/reducers"},next:{title:"Effects",permalink:"/docs/effects"}},l={},i=[{value:"Reactive Select",id:"reactive-select",level:2},{value:"Memoized Selectors",id:"memoized-selectors",level:2},{value:"<code>createFeatureStateSelector</code>",id:"createfeaturestateselector",level:3},{value:"<code>createSelector</code>",id:"createselector",level:3}],d={toc:i};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,o.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Selectors are used to select a specific piece of state."),(0,n.kt)("h2",{id:"reactive-select"},"Reactive Select"),(0,n.kt)("p",null,"We can select state with ",(0,n.kt)("inlineCode",{parentName:"p"},"store.select"),". The ",(0,n.kt)("inlineCode",{parentName:"p"},"select")," method returns an Observable which emits when the selected state changes."),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"select")," takes a callback function which gives access to the current global state:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import { Observable } from 'rxjs';\nimport { TodoState } from './todo-reducer';\n\nconst globalState$: Observable<any> = store.select(state => state);\nconst todoState$: Observable<TodoState> = store.select(state => state['todo']);\n")),(0,n.kt)("h2",{id:"memoized-selectors"},"Memoized Selectors"),(0,n.kt)("p",null,"MiniRx comes with memoized selectors out of the box. With the selectors we can easily select and combine state. The MiniRx selectors are memoized to prevent unnecessary calculations."),(0,n.kt)("h3",{id:"createfeaturestateselector"},(0,n.kt)("inlineCode",{parentName:"h3"},"createFeatureStateSelector")),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"createFeatureStateSelector")," selects a feature state from the global state object.\nWe have to use the same key that we used for registering the feature reducer (e.g. we used the 'todo' key for the todoReducer)."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-selectors.ts"',title:'"todo-selectors.ts"'},"import { createFeatureStateSelector } from 'mini-rx-store';\nimport { TodoState } from './todo-reducer';\n\nexport const getTodoFeatureState = createFeatureStateSelector<TodoState>('todo');\n")),(0,n.kt)("h3",{id:"createselector"},(0,n.kt)("inlineCode",{parentName:"h3"},"createSelector")),(0,n.kt)("p",null,"With ",(0,n.kt)("inlineCode",{parentName:"p"},"createSelector")," we can require many other selectors to create a new selector.\nThe last argument passed to ",(0,n.kt)("inlineCode",{parentName:"p"},"createSelector")," is the projection function.\nIn the projection function we can access the return values of the required selectors."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-selectors.ts"',title:'"todo-selectors.ts"'},"import { createSelector } from 'mini-rx-store'\n\nexport const getTodos = createSelector(\n  getTodoFeatureState,\n  state => state.todos\n);\n\nexport const getSelectedTodoId = createSelector(\n  getTodoFeatureState,\n  state => state.selectedTodoId\n)\n\nexport const getSelectedTodo = createSelector(\n  getTodos,\n  getSelectedTodoId,\n  (todos, id) => todos.find(item => item.id === id)\n)\n")),(0,n.kt)("p",null,"Let's use the memoized selectors to create our state Observables:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import { getTodoFeatureState, getTodos, getTodosCount } from './todo-selectors';\n\nconst todoState$: Observable<TodoState> = store.select(getTodoFeatureState);\nconst todos$: Observable<Todo[]> = store.select(getTodos);\nconst selectedTodo$: Observable<Todo> = store.select(getSelectedTodo);\n")))}u.isMDXComponent=!0}}]);