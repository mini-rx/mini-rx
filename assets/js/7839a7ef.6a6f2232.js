"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[861],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=o.createContext({}),p=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return o.createElement(c.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,u=d["".concat(c,".").concat(m)]||d[m]||f[m]||r;return n?o.createElement(u,i(i({ref:t},l),{},{components:n})):o.createElement(u,i({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4084:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>f,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var o=n(7462),a=(n(7294),n(3905));const r={id:"effects",title:"Effects",slug:"/effects"},i=void 0,s={unversionedId:"effects",id:"effects",title:"Effects",description:"Effects offer an advanced way to trigger side effects (e.g. API calls).",source:"@site/docs/effects.md",sourceDirName:".",slug:"/effects",permalink:"/docs/effects",draft:!1,editUrl:"https://github.com/spierala/mini-rx-store/edit/master/docs/docs/effects.md",tags:[],version:"current",frontMatter:{id:"effects",title:"Effects",slug:"/effects"},sidebar:"docs",previous:{title:"Selectors",permalink:"/docs/selectors"},next:{title:"ts-action",permalink:"/docs/ts-action"}},c={},p=[{value:"Writing Effects",id:"writing-effects",level:3},{value:"<code>mapResponse</code>",id:"mapresponse",level:2},{value:"Configure the effect with <code>createEffect</code>",id:"configure-the-effect-with-createeffect",level:2},{value:"Non-dispatching effects",id:"non-dispatching-effects",level:3}],l={toc:p};function f(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Effects offer an advanced way to trigger side effects (e.g. API calls)."),(0,a.kt)("p",null,"Using ",(0,a.kt)("inlineCode",{parentName:"p"},"effect")," has the following benefits:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"you can more easily handle race conditions with RxJS flattening operators (e.g. switchMap, concatMap)"),(0,a.kt)("li",{parentName:"ul"},"the subscriptions are created internally (when registering an effect)"),(0,a.kt)("li",{parentName:"ul"},"Effects help to isolate side effects from components ")),(0,a.kt)("h3",{id:"writing-effects"},"Writing Effects"),(0,a.kt)("p",null,"Writing an effect consists of these basic parts:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Listen for a specific action using (",(0,a.kt)("inlineCode",{parentName:"li"},"ofType"),")"),(0,a.kt)("li",{parentName:"ul"},"Handle race conditions with RxJS flattening operators (e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"mergeMap"),")"),(0,a.kt)("li",{parentName:"ul"},"Perform the actual side effect"),(0,a.kt)("li",{parentName:"ul"},"Return a new action when the side effect completes"),(0,a.kt)("li",{parentName:"ul"},"Register the effect")),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { actions$, ofType } from 'mini-rx-store';\nimport {\n  LoadTodos,\n  LoadTodosSuccess,\n  LoadTodosFail,\n  TodoActionTypes\n} from './todo-actions';\nimport { Todo } from \".\";\nimport { mergeMap, map, catchError } from 'rxjs/operators';\nimport { ajax } from 'rxjs/ajax';\nimport { of } from 'rxjs';\n\nconst loadEffect = actions$.pipe(\n  ofType(TodoActionTypes.LoadTodos),\n  mergeMap(() =>\n    ajax<Todo[]>('https://jsonplaceholder.typicode.com/todos').pipe(\n      map(res => new LoadTodosSuccess(res.response)),\n      catchError(err => of(new LoadTodosFail(err)))\n    )\n  )\n);\n\n// Register the effect\nstore.effect(loadEffect);\n\n// Trigger the effect\nstore.dispatch(new LoadTodos())\n")),(0,a.kt)("p",null,"The code above creates an effect. As soon as the ",(0,a.kt)("inlineCode",{parentName:"p"},"LoadTodos")," action has been dispatched, the API call will be executed.\nDepending on the result of the API call, a new action will be dispatched:\n",(0,a.kt)("inlineCode",{parentName:"p"},"LoadTodosSuccess")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"LoadTodosFail"),"."),(0,a.kt)("p",null,"The effect needs to be registered using ",(0,a.kt)("inlineCode",{parentName:"p"},"store.effect"),"."),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"It is important to handle possible API errors with ",(0,a.kt)("inlineCode",{parentName:"p"},"catchError"),", to make sure that the effect source does not complete.\nA completed effect source will stop listening to actions, and the effect does not work anymore.")),(0,a.kt)("h2",{id:"mapresponse"},(0,a.kt)("inlineCode",{parentName:"h2"},"mapResponse")),(0,a.kt)("p",null,"It is important to handle possible errors (e.g. when the API call fails).\nThe ",(0,a.kt)("inlineCode",{parentName:"p"},"mapResponse")," operator enforces to handle the error case and reduces boilerplate."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"mapResponse")," is a thin wrapper around RxJS ",(0,a.kt)("inlineCode",{parentName:"p"},"map")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"catchError"),"."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { actions$, ofType, mapResponse } from 'mini-rx-store';\nimport {\n    LoadTodosFail,\n    LoadTodosSuccess,\n    TodoActionTypes,\n} from './todo-actions';\nimport { Todo } from '.';\nimport { mergeMap } from 'rxjs/operators';\nimport { ajax } from 'rxjs/ajax';\n\nconst loadEffect = actions$.pipe(\n  ofType(TodoActionTypes.LoadTodos),\n  mergeMap(() =>\n    ajax<Todo[]>('https://jsonplaceholder.typicode.com/todos').pipe(\n      mapResponse(\n        res => new LoadTodosSuccess(res.response),\n        err => new LoadTodosFail(err)\n      )\n    )\n  )\n);\n")),(0,a.kt)("h2",{id:"configure-the-effect-with-createeffect"},"Configure the effect with ",(0,a.kt)("inlineCode",{parentName:"h2"},"createEffect")),(0,a.kt)("p",null,"With ",(0,a.kt)("inlineCode",{parentName:"p"},"createEffect")," you can pass additional configuration to an effect."),(0,a.kt)("h3",{id:"non-dispatching-effects"},"Non-dispatching effects"),(0,a.kt)("p",null,"In some situations your effect can not return a meaningful action. For example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"when you only want to log "),(0,a.kt)("li",{parentName:"ul"},"when you only want to navigate based on an incoming action")),(0,a.kt)("p",null,"You can pass the ",(0,a.kt)("inlineCode",{parentName:"p"},"{dispatch: false}")," config to the ",(0,a.kt)("inlineCode",{parentName:"p"},"createEffect")," function to create an effect which does not dispatch an action."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const nonDispatchingEffect = createEffect(actions$.pipe(\n  ofType(TodoActionTypes.LoadTodos),\n  tap((v) => console.log('LoadTodos', v))\n), {dispatch: false});\n\n// Register the effect\nstore.effect(nonDispatchingEffect);\n")))}f.isMDXComponent=!0}}]);