"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[507],{2866:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>n,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"selectors","title":"Selectors","description":"Selectors are used to select a specific piece of state.","source":"@site/docs/selectors.md","sourceDirName":".","slug":"/selectors","permalink":"/docs/selectors","draft":false,"unlisted":false,"editUrl":"https://github.com/spierala/mini-rx-store/edit/master/docs/docs/selectors.md","tags":[],"version":"current","frontMatter":{"id":"selectors","title":"Selectors","sidebar_label":"Selectors","slug":"/selectors"},"sidebar":"docs","previous":{"title":"Reducers","permalink":"/docs/reducers"},"next":{"title":"Effects","permalink":"/docs/effects"}}');var r=o(4848),c=o(8453);const n={id:"selectors",title:"Selectors",sidebar_label:"Selectors",slug:"/selectors"},a=void 0,l={},d=[{value:"Reactive Select",id:"reactive-select",level:2},{value:"Memoized Selectors",id:"memoized-selectors",level:2},{value:"<code>createFeatureStateSelector</code>",id:"createfeaturestateselector",level:3},{value:"<code>createSelector</code>",id:"createselector",level:3}];function i(e){const t={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"Selectors are used to select a specific piece of state."}),"\n",(0,r.jsx)(t.h2,{id:"reactive-select",children:"Reactive Select"}),"\n",(0,r.jsxs)(t.p,{children:["We can select state with ",(0,r.jsx)(t.code,{children:"store.select"}),". The ",(0,r.jsx)(t.code,{children:"select"})," method returns an Observable which emits when the selected state changes."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"select"})," takes a callback function which gives access to the current global state:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"import { Observable } from 'rxjs';\nimport { TodoState } from './todo-reducer';\n\nconst globalState$: Observable<any> = store.select(state => state);\nconst todoState$: Observable<TodoState> = store.select(state => state['todo']);\n"})}),"\n",(0,r.jsx)(t.h2,{id:"memoized-selectors",children:"Memoized Selectors"}),"\n",(0,r.jsx)(t.p,{children:"MiniRx comes with memoized selectors out of the box. With the selectors we can easily select and combine state. The MiniRx selectors are memoized to prevent unnecessary calculations."}),"\n",(0,r.jsx)(t.h3,{id:"createfeaturestateselector",children:(0,r.jsx)(t.code,{children:"createFeatureStateSelector"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"createFeatureStateSelector"})," selects a feature state from the global state object.\nWe have to use the same key that we used for registering the feature reducer (e.g. we used the 'todo' key for the todoReducer)."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="todo-selectors.ts"',children:"import { createFeatureStateSelector } from 'mini-rx-store';\nimport { TodoState } from './todo-reducer';\n\nexport const getTodoFeatureState = createFeatureStateSelector<TodoState>('todo');\n"})}),"\n",(0,r.jsx)(t.h3,{id:"createselector",children:(0,r.jsx)(t.code,{children:"createSelector"})}),"\n",(0,r.jsxs)(t.p,{children:["With ",(0,r.jsx)(t.code,{children:"createSelector"})," we can require many other selectors to create a new selector.\nThe last argument passed to ",(0,r.jsx)(t.code,{children:"createSelector"})," is the projection function.\nIn the projection function we can access the return values of the required selectors."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="todo-selectors.ts"',children:"import { createSelector } from 'mini-rx-store'\n\nexport const getTodos = createSelector(\n  getTodoFeatureState,\n  state => state.todos\n);\n\nexport const getSelectedTodoId = createSelector(\n  getTodoFeatureState,\n  state => state.selectedTodoId\n)\n\nexport const getSelectedTodo = createSelector(\n  getTodos,\n  getSelectedTodoId,\n  (todos, id) => todos.find(item => item.id === id)\n)\n"})}),"\n",(0,r.jsx)(t.p,{children:"Let's use the memoized selectors to create our state Observables:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"import { getTodoFeatureState, getTodos, getTodosCount } from './todo-selectors';\n\nconst todoState$: Observable<TodoState> = store.select(getTodoFeatureState);\nconst todos$: Observable<Todo[]> = store.select(getTodos);\nconst selectedTodo$: Observable<Todo> = store.select(getSelectedTodo);\n"})})]})}function u(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(i,{...e})}):i(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>n,x:()=>a});var s=o(6540);const r={},c=s.createContext(r);function n(e){const t=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:n(e.components),s.createElement(c.Provider,{value:t},e.children)}}}]);