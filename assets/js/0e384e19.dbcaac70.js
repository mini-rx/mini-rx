"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[976],{2053:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"intro","title":"Quick Start","description":"MiniRx Store provides Reactive State Management, powered by RxJS.","source":"@site/docs/intro.md","sourceDirName":".","slug":"/intro","permalink":"/docs/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/spierala/mini-rx-store/edit/master/docs/docs/intro.md","tags":[],"version":"current","frontMatter":{"id":"intro","title":"Quick Start","sidebar_label":"Quick Start","slug":"/intro"},"sidebar":"docs","next":{"title":"Installation & TypeScript Config","permalink":"/docs/"}}');var r=n(4848),o=n(8453);const i={id:"intro",title:"Quick Start",sidebar_label:"Quick Start",slug:"/intro"},a=void 0,c={},l=[{value:"What&#39;s Included",id:"whats-included",level:2},{value:"Key Concepts",id:"key-concepts",level:2},{value:"Basic Tutorial",id:"basic-tutorial",level:2},{value:"Store (Redux)",id:"store-redux",level:3},{value:"Feature Store",id:"feature-store",level:3},{value:"Component Store",id:"component-store",level:3},{value:"Demos",id:"demos",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["MiniRx Store provides ",(0,r.jsx)(t.strong,{children:"Reactive State Management"}),", powered by ",(0,r.jsx)(t.a,{href:"https://rxjs.dev/",children:(0,r.jsx)(t.strong,{children:"RxJS"})}),".\nIt is a ",(0,r.jsx)(t.strong,{children:"highly flexible"})," solution and ",(0,r.jsx)(t.strong,{children:"scales"})," with your state management needs:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Manage ",(0,r.jsx)(t.strong,{children:"global"})," state at large scale with the ",(0,r.jsx)(t.strong,{children:"Store (Redux) API"})]}),"\n",(0,r.jsxs)(t.li,{children:["Manage ",(0,r.jsx)(t.strong,{children:"global"})," state with a minimum of boilerplate using ",(0,r.jsx)(t.strong,{children:"Feature Stores"})]}),"\n",(0,r.jsxs)(t.li,{children:["Manage ",(0,r.jsx)(t.strong,{children:"local"})," component state with ",(0,r.jsx)(t.strong,{children:"Component Stores"})]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["MiniRx always tries to find the sweet spot between ",(0,r.jsx)(t.strong,{children:"powerful, simple and lightweight"}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"whats-included",children:"What's Included"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"RxJS powered global state management"}),"\n",(0,r.jsx)(t.li,{children:"State and actions are exposed as RxJS Observables"}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"redux",children:"Store (Redux)"}),":","\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Actions"}),"\n",(0,r.jsx)(t.li,{children:"Reducers"}),"\n",(0,r.jsx)(t.li,{children:"Meta Reducers"}),"\n",(0,r.jsx)(t.li,{children:"Memoized Selectors"}),"\n",(0,r.jsx)(t.li,{children:"Effects"}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"mapResponse"})," operator: handle the side effect response in Effects"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"ts-action",children:"Support for ts-action"}),": Create actions and reducers more efficiently"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"fs-quick-start",children:"Feature Store"}),": Manage feature state directly with a minimum of boilerplate:","\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"setState()"})," update the feature state"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"setInitialState()"})," initialize state lazily"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"select()"})," select state from the feature state object as RxJS Observable"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"effect()"})," run side effects like API calls and update feature state"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"connect()"})," connect external Observables to your Feature Store"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"undo()"})," easily undo setState actions (requires the UndoExtension)"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"destroy()"})," remove the feature state from the global state object"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"tapResponse"})," operator: handle the side effect response in Feature Store ",(0,r.jsx)(t.code,{children:"effect"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"component-store",children:"Component Store"}),": Manage state locally:","\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Component Store is perfect for local component state"}),"\n",(0,r.jsxs)(t.li,{children:["Component Store has the same simple API as Feature Store (",(0,r.jsx)(t.code,{children:"setState"}),", ",(0,r.jsx)(t.code,{children:"select"}),", ...)"]}),"\n",(0,r.jsx)(t.li,{children:"Component Store state is independent of the global state object"}),"\n",(0,r.jsx)(t.li,{children:"Component Store is destroyable"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"ext-quick-start",children:"Extensions"}),":","\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Redux DevTools Extension: Inspect global state with the Redux DevTools"}),"\n",(0,r.jsx)(t.li,{children:"Immutable Extension: Enforce state immutability"}),"\n",(0,r.jsx)(t.li,{children:"Undo Extension: Undo dispatched actions"}),"\n",(0,r.jsx)(t.li,{children:"Logger Extension: console.log the current action and updated state"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.li,{children:"Framework-agnostic: MiniRx works with any frontend project built with JavaScript or TypeScript (Angular, Svelte, React, Vue, or anything else)"}),"\n",(0,r.jsx)(t.li,{children:"TypeScript support: The MiniRx API comes with TypeScript type definitions"}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"angular",children:"Angular Integration"}),": Use MiniRx Store the Angular way:","\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Configure the Store with ",(0,r.jsx)(t.code,{children:"StoreModule.forRoot()"})]}),"\n",(0,r.jsxs)(t.li,{children:["Add feature state with ",(0,r.jsx)(t.code,{children:"StoreModule.forFeature()"})]}),"\n",(0,r.jsxs)(t.li,{children:["Inject ",(0,r.jsx)(t.code,{children:"Store"})," and ",(0,r.jsx)(t.code,{children:"Actions"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["State and actions are exposed as ",(0,r.jsx)(t.strong,{children:"RxJS Observables"})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Single source of truth"}),": The Store holds a single object which represents the ",(0,r.jsx)(t.strong,{children:"global"})," application state"]}),"\n",(0,r.jsxs)(t.li,{children:["The global state has a ",(0,r.jsx)(t.strong,{children:"flat hierarchy"}),' and is divided into "feature states" (also called "slices" in Redux world)']}),"\n",(0,r.jsxs)(t.li,{children:['For each "feature state" we can decide to use the ',(0,r.jsx)(t.code,{children:"Store"})," (Redux) API with actions and reducers or the simplified ",(0,r.jsx)(t.code,{children:"FeatureStore"})," API"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"Store"})," and ",(0,r.jsx)(t.code,{children:"FeatureStore"})," are different APIs for one and the same Redux Store"]}),"\n",(0,r.jsxs)(t.li,{children:["Use ",(0,r.jsx)(t.code,{children:"ComponentStore"})," to manage state which is independent of the global state object"]}),"\n",(0,r.jsxs)(t.li,{children:["State is ",(0,r.jsx)(t.strong,{children:"read-only"})," (immutable) and can only be changed by dispatching actions (Redux API) or by using ",(0,r.jsx)(t.code,{children:"setState"})," (Feature Store / Component Store)"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"basic-tutorial",children:"Basic Tutorial"}),"\n",(0,r.jsxs)(t.p,{children:["Let's dive into some code to see MiniRx in action. You can play with the tutorial code on ",(0,r.jsx)(t.a,{href:"https://stackblitz.com/edit/mini-rx-store-basic-tutorial?file=index.ts",children:"StackBlitz"}),"."]}),"\n",(0,r.jsx)(t.h3,{id:"store-redux",children:"Store (Redux)"}),"\n",(0,r.jsx)(t.p,{children:"MiniRx supports the classic Redux API with registering reducers and dispatching actions.\nObservable state can be selected with memoized selectors."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"import {\n  Action,\n  Store,\n  configureStore,\n  createFeatureStateSelector,\n  createSelector\n} from 'mini-rx-store';\nimport { Observable } from 'rxjs';\n\n// 1.) State interface\ninterface CounterState {\n  count: number;\n}\n\n// 2.) Initial state\nconst counterInitialState: CounterState = {\n  count: 1\n};\n\n// 3.) Reducer\nfunction counterReducer(\n  state: CounterState = counterInitialState,\n  action: Action\n): CounterState {\n  switch (action.type) {\n    case 'inc':\n      return {\n        ...state,\n        count: state.count + 1\n      };\n    default:\n      return state;\n  }\n}\n\n// 4.) Get hold of the store instance and register root reducers\nconst store: Store = configureStore({\n  reducers: {\n    counter: counterReducer\n  }\n});\n\n// 5.) Create memoized selectors\nconst getCounterFeatureState = createFeatureStateSelector<CounterState>('counter');\nconst getCount = createSelector(\n  getCounterFeatureState,\n  state => state.count\n);\n\n// 6.) Select state as RxJS Observable\nconst count$: Observable<number> = store.select(getCount);\ncount$.subscribe(count => console.log('count:', count));\n// OUTPUT: count: 1\n\n// 7.) Dispatch an action\nstore.dispatch({ type: 'inc' });\n// OUTPUT: count: 2\n"})}),"\n",(0,r.jsx)(t.h3,{id:"feature-store",children:"Feature Store"}),"\n",(0,r.jsx)(t.p,{children:"With MiniRx Feature Stores we can manage feature state directly with a minimum of boilerplate."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="counter-feature-store.ts"',children:"import { FeatureStore } from 'mini-rx-store';\nimport { Observable } from 'rxjs';\n\n// State interface\ninterface CounterState {\n  count: number;\n}\n\n// Initial state\nconst counterInitialState: CounterState = {\n  count: 11\n};\n\n// Extend FeatureStore and pass the State interface\nexport class CounterFeatureStore extends FeatureStore<CounterState> {\n  // Select state as RxJS Observable\n  count$: Observable<number> = this.select(state => state.count);\n\n  constructor() {\n    // Call super with the feature key and the initial state\n    super('counterFs', counterInitialState);\n  }\n\n  // Update state with `setState`\n  inc() {\n    this.setState(state => ({ count: state.count + 1 }));\n  }\n}\n"})}),"\n",(0,r.jsx)(t.p,{children:'Use the "CounterFeatureStore" like this:'}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"import { CounterFeatureStore } from \"./counter-feature-store\";\n\nconst counterFs = new CounterFeatureStore();\ncounterFs.count$.subscribe(count => console.log('count:', count));\n// OUTPUT: count: 11\n\ncounterFs.inc();\n// OUTPUT: count: 12\n"})}),"\n",(0,r.jsxs)(t.admonition,{type:"info",children:[(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"The state of a Feature Store becomes part of the global state"})}),(0,r.jsx)(t.p,{children:"Every new Feature Store will show up in the global state with the corresponding feature key (e.g. 'counterFs'):"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:'store.select(state => state).subscribe(console.log);\n// OUTPUT: {"counter":{"count":2},"counterFs":{"count":12}}\n'})})]}),"\n",(0,r.jsx)(t.h3,{id:"component-store",children:"Component Store"}),"\n",(0,r.jsx)(t.p,{children:"Manage state locally and independently of the global state object.\nComponent Store has the identical API as Feature Store."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"import { ComponentStore } from 'mini-rx-store';\nimport { Observable } from 'rxjs';\n\n// State interface\ninterface CounterState {\n  count: number;\n}\n\n// Initial state\nconst counterInitialState: CounterState = {\n  count: 111,\n};\n\n// Extend ComponentStore and pass the State interface\nexport class CounterComponentStore extends ComponentStore<CounterState> {\n  // Select state as RxJS Observable\n  count$: Observable<number> = this.select((state) => state.count);\n\n  constructor() {\n    // Call super with the initial state\n    super(counterInitialState);\n  }\n\n  // Update state with `setState`\n  inc() {\n    this.setState((state) => ({ count: state.count + 1 }));\n  }\n}\n"})}),"\n",(0,r.jsx)(t.p,{children:'Use the "CounterComponentStore" like this:'}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"const counterCs = new CounterComponentStore();\ncounterCs.count$.subscribe(count => console.log('count:', count));\n// OUTPUT: count: 111\n\ncounterCs.inc();\n// OUTPUT: count: 112\n"})}),"\n",(0,r.jsx)(t.h2,{id:"demos",children:"Demos"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://stackblitz.com/edit/mini-rx-store-basic-tutorial?file=index.ts",children:"MiniRx Store - Basic Tutorial"}),": See the basic tutorial in action"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://angular-demo.mini-rx.io",children:"MiniRx Store Angular Demo"})," (",(0,r.jsx)(t.a,{href:"https://github.com/spierala/mini-rx-store/tree/master/apps/mini-rx-angular-demo",children:"source code"}),")"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://svelte-demo.mini-rx.io",children:"MiniRx Store Svelte Demo"})," (",(0,r.jsx)(t.a,{href:"https://github.com/spierala/mini-rx-svelte-demo",children:"source code"}),")"]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var s=n(6540);const r={},o=s.createContext(r);function i(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);