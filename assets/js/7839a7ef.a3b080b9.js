"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[95],{8573:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>l,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"effects","title":"Effects","description":"Effects offer an advanced way to trigger side effects (e.g. API calls).","source":"@site/docs/effects.md","sourceDirName":".","slug":"/effects","permalink":"/docs/effects","draft":false,"unlisted":false,"editUrl":"https://github.com/spierala/mini-rx-store/edit/master/docs/docs/effects.md","tags":[],"version":"current","frontMatter":{"id":"effects","title":"Effects","slug":"/effects"},"sidebar":"docs","previous":{"title":"Selectors","permalink":"/docs/selectors"},"next":{"title":"ts-action","permalink":"/docs/ts-action"}}');var s=o(4848),c=o(8453);const i={id:"effects",title:"Effects",slug:"/effects"},r=void 0,a={},d=[{value:"Writing Effects",id:"writing-effects",level:3},{value:"<code>mapResponse</code>",id:"mapresponse",level:2},{value:"Configure the effect with <code>createEffect</code>",id:"configure-the-effect-with-createeffect",level:2},{value:"Non-dispatching effects",id:"non-dispatching-effects",level:3}];function f(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Effects offer an advanced way to trigger side effects (e.g. API calls)."}),"\n",(0,s.jsxs)(n.p,{children:["Using ",(0,s.jsx)(n.code,{children:"effect"})," has the following benefits:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"you can more easily handle race conditions with RxJS flattening operators (e.g. switchMap, concatMap)"}),"\n",(0,s.jsx)(n.li,{children:"the subscriptions are created internally (when registering an effect)"}),"\n",(0,s.jsx)(n.li,{children:"Effects help to isolate side effects from components"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"writing-effects",children:"Writing Effects"}),"\n",(0,s.jsx)(n.p,{children:"Writing an effect consists of these basic parts:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Listen for a specific action using ",(0,s.jsx)(n.code,{children:"ofType"})]}),"\n",(0,s.jsxs)(n.li,{children:["Handle race conditions with RxJS flattening operators (e.g. ",(0,s.jsx)(n.code,{children:"mergeMap"}),")"]}),"\n",(0,s.jsx)(n.li,{children:"Perform the actual side effect"}),"\n",(0,s.jsx)(n.li,{children:"Return a new action when the side effect completes"}),"\n",(0,s.jsx)(n.li,{children:"Register the effect"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { actions$, ofType } from 'mini-rx-store';\nimport {\n  LoadTodos,\n  LoadTodosSuccess,\n  LoadTodosFail,\n  TodoActionTypes\n} from './todo-actions';\nimport { Todo } from \".\";\nimport { mergeMap, map, catchError } from 'rxjs/operators';\nimport { ajax } from 'rxjs/ajax';\nimport { of } from 'rxjs';\n\nconst loadEffect = actions$.pipe(\n  ofType(TodoActionTypes.LoadTodos),\n  mergeMap(() =>\n    ajax<Todo[]>('https://jsonplaceholder.typicode.com/todos').pipe(\n      map(res => new LoadTodosSuccess(res.response)),\n      catchError(err => of(new LoadTodosFail(err)))\n    )\n  )\n);\n\n// Register the effect\nstore.effect(loadEffect);\n\n// Trigger the effect\nstore.dispatch(new LoadTodos())\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The code above creates an effect. As soon as the ",(0,s.jsx)(n.code,{children:"LoadTodos"})," action has been dispatched, the API call will be executed.\nDepending on the result of the API call, a new action will be dispatched:\n",(0,s.jsx)(n.code,{children:"LoadTodosSuccess"})," or ",(0,s.jsx)(n.code,{children:"LoadTodosFail"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The effect needs to be registered using ",(0,s.jsx)(n.code,{children:"store.effect"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsxs)(n.p,{children:["It is important to handle possible API errors with ",(0,s.jsx)(n.code,{children:"catchError"}),", to make sure that the effect source does not complete.\nA completed effect source will stop listening to actions, and the effect does not work anymore."]})}),"\n",(0,s.jsx)(n.h2,{id:"mapresponse",children:(0,s.jsx)(n.code,{children:"mapResponse"})}),"\n",(0,s.jsxs)(n.p,{children:["It is important to handle possible errors (e.g. when the API call fails).\nThe ",(0,s.jsx)(n.code,{children:"mapResponse"})," operator enforces to handle the error case and reduces boilerplate."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"mapResponse"})," is a thin wrapper around RxJS ",(0,s.jsx)(n.code,{children:"map"})," and ",(0,s.jsx)(n.code,{children:"catchError"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { actions$, ofType, mapResponse } from 'mini-rx-store';\nimport {\n    LoadTodosFail,\n    LoadTodosSuccess,\n    TodoActionTypes,\n} from './todo-actions';\nimport { Todo } from '.';\nimport { mergeMap } from 'rxjs/operators';\nimport { ajax } from 'rxjs/ajax';\n\nconst loadEffect = actions$.pipe(\n  ofType(TodoActionTypes.LoadTodos),\n  mergeMap(() =>\n    ajax<Todo[]>('https://jsonplaceholder.typicode.com/todos').pipe(\n      mapResponse(\n        res => new LoadTodosSuccess(res.response),\n        err => new LoadTodosFail(err)\n      )\n    )\n  )\n);\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"configure-the-effect-with-createeffect",children:["Configure the effect with ",(0,s.jsx)(n.code,{children:"createEffect"})]}),"\n",(0,s.jsxs)(n.p,{children:["With ",(0,s.jsx)(n.code,{children:"createEffect"})," you can pass additional configuration to an effect."]}),"\n",(0,s.jsx)(n.h3,{id:"non-dispatching-effects",children:"Non-dispatching effects"}),"\n",(0,s.jsx)(n.p,{children:"In some situations your effect can not return a meaningful action. For example:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"when you only want to log"}),"\n",(0,s.jsx)(n.li,{children:"when you only want to navigate based on an incoming action"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["You can pass the ",(0,s.jsx)(n.code,{children:"{dispatch: false}"})," config to the ",(0,s.jsx)(n.code,{children:"createEffect"})," function to create an effect which does not dispatch an action."]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const nonDispatchingEffect = createEffect(actions$.pipe(\n  ofType(TodoActionTypes.LoadTodos),\n  tap((v) => console.log('LoadTodos', v))\n), {dispatch: false});\n\n// Register the effect\nstore.effect(nonDispatchingEffect);\n"})})]})}function l(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(f,{...e})}):f(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>r});var t=o(6540);const s={},c=t.createContext(s);function i(e){const n=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);