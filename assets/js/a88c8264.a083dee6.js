"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[959],{5257:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>i,contentTitle:()=>r,default:()=>u,frontMatter:()=>d,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"fs-set-state","title":"Update State","description":"Use setState to update the state of a Feature Store right away.","source":"@site/docs/fs-set-state.md","sourceDirName":".","slug":"/update-feature-state","permalink":"/docs/update-feature-state","draft":false,"unlisted":false,"editUrl":"https://github.com/spierala/mini-rx-store/edit/master/docs/docs/fs-set-state.md","tags":[],"version":"current","frontMatter":{"id":"fs-set-state","title":"Update State","sidebar_label":"Update State","slug":"/update-feature-state"},"sidebar":"docs","previous":{"title":"Setup","permalink":"/docs/feature-store-setup"},"next":{"title":"Connect","permalink":"/docs/connect-feature-state-to-observable"}}');var o=s(4848),a=s(8453);const d={id:"fs-set-state",title:"Update State",sidebar_label:"Update State",slug:"/update-feature-state"},r=void 0,i={},c=[{value:"Undo setState Actions with <code>undo</code>",id:"undo-setstate-actions-with-undo",level:3}];function l(e){const t={a:"a",code:"code",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["Use ",(0,o.jsx)(t.code,{children:"setState"})," to update the state of a Feature Store right away.\n",(0,o.jsx)(t.code,{children:"setState"})," accepts a Partial Type. This allows us to pass only some properties of a bigger state interface."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",metastring:'title="todo-feature-store.ts"',children:"selectTodo(id: number) {\n  this.setState({selectedTodoId: id});\n}\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Do you need to update the state based on the current state?\n",(0,o.jsx)(t.code,{children:"setState"})," accepts a callback function which gives you access to the current state."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",metastring:'title="todo-feature-store.ts"',children:"// Update state based on current state\naddTodo(todo: Todo) {\n  this.setState(state => ({\n    todos: [...state.todos, todo]\n  }))\n}\n"})}),"\n",(0,o.jsxs)(t.p,{children:["For better logging in the JS Console / Redux DevTools you can provide an optional name to the ",(0,o.jsx)(t.code,{children:"setState"})," function:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"this.setState({selectedTodoId: id}, 'selectTodo');\n"})}),"\n",(0,o.jsxs)(t.h3,{id:"undo-setstate-actions-with-undo",children:["Undo setState Actions with ",(0,o.jsx)(t.code,{children:"undo"})]}),"\n",(0,o.jsxs)(t.p,{children:["We can easily undo ",(0,o.jsx)(t.code,{children:"setState"})," actions with the ",(0,o.jsx)(t.a,{href:"ext-undo-extension",children:"Undo Extension"})," installed."]}),"\n",(0,o.jsxs)(t.p,{children:["Calling ",(0,o.jsx)(t.code,{children:"setState"})," returns an action which can be used to perform an Undo."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",metastring:'title="todo-feature-store.ts"',children:"import { Action } from 'mini-rx-store';\n\nremoveTodo(id: number): Action {\n  return this.setState(state => ({\n    todos: state.todos.filter(item => item.id !== id)\n  }))\n}\n\nremoveAndUndo() {\n  const todoRemoveAction: Action = this.removeTodo(2);\n  this.undo(todoRemoveAction);   \n}\n"})})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>d,x:()=>r});var n=s(6540);const o={},a=n.createContext(o);function d(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);