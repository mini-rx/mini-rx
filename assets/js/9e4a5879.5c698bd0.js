"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[27],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>m});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),s=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},l=function(e){var t=s(e.components);return n.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),p=s(r),m=o,f=p["".concat(i,".").concat(m)]||p[m]||d[m]||a;return r?n.createElement(f,c(c({ref:t},l),{},{components:r})):n.createElement(f,c({ref:t},l))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,c=new Array(a);c[0]=p;var u={};for(var i in t)hasOwnProperty.call(t,i)&&(u[i]=t[i]);u.originalType=e,u.mdxType="string"==typeof e?e:o,c[1]=u;for(var s=2;s<a;s++)c[s]=r[s];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},1806:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>u,toc:()=>s});var n=r(7462),o=(r(7294),r(3905));const a={id:"redux-setup",title:"Redux Setup"},c=void 0,u={unversionedId:"redux-setup",id:"redux-setup",title:"Redux Setup",description:"With configureStore we get hold of the global store object.",source:"@site/docs/redux-setup.md",sourceDirName:".",slug:"/redux-setup",permalink:"/docs/redux-setup",draft:!1,editUrl:"https://github.com/spierala/mini-rx-store/edit/master/docs/docs/redux-setup.md",tags:[],version:"current",frontMatter:{id:"redux-setup",title:"Redux Setup"},sidebar:"docs",previous:{title:"Quick Start",permalink:"/docs/redux"},next:{title:"Actions",permalink:"/docs/actions"}},i={},s=[{value:"<code>configureStore</code>",id:"configurestore",level:2},{value:"Feature Reducers",id:"feature-reducers",level:2},{value:"Add Feature Reducers dynamically",id:"add-feature-reducers-dynamically",level:3},{value:"Initial State",id:"initial-state",level:2},{value:"Meta reducers",id:"meta-reducers",level:2}],l={toc:s};function d(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"With ",(0,o.kt)("inlineCode",{parentName:"p"},"configureStore")," we get hold of the global store object.\nAt the same time we can pass a configuration to initialize our feature reducers, meta reducers, initial state and extensions."),(0,o.kt)("h2",{id:"configurestore"},(0,o.kt)("inlineCode",{parentName:"h2"},"configureStore")),(0,o.kt)("p",null,"At first, we do not need any configuration to get started."),(0,o.kt)("p",null,"Let`s just get hold of the store instance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { configureStore, Store } from 'mini-rx-store';\n\nconst store: Store = configureStore({});\n")),(0,o.kt)("p",null,"With the ",(0,o.kt)("inlineCode",{parentName:"p"},"Store")," instance we can already add reducers (dynamically), select state, dispatch actions and create effects."),(0,o.kt)("h2",{id:"feature-reducers"},"Feature Reducers"),(0,o.kt)("p",null,"We can configure the feature reducers via the configuration object. The reducers will be ready at store initialization."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { configureStore, Store } from 'mini-rx-store';\nimport productReducer from './product-reducer';\nimport userReducer from './user-reducer';\n\nconst store: Store = configureStore({\n  reducers: {\n    product: productReducer,\n    user: userReducer\n  }\n});\n")),(0,o.kt)("h3",{id:"add-feature-reducers-dynamically"},"Add Feature Reducers dynamically"),(0,o.kt)("p",null,"It is possible to add feature reducers dynamically later like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import todoReducer from './todo-reducer';\n\nstore.feature('todo', todoReducer);\n")),(0,o.kt)("h2",{id:"initial-state"},"Initial State"),(0,o.kt)("p",null,"We can set the initial state of the store via the configuration object. The initial state keys must match the provided reducer keys:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { configureStore, Store } from 'mini-rx-store';\nimport { productReducer } from './product-reducer';\nimport { userReducer } from './user-reducer';\n\nconst store: Store = configureStore({\n  reducers: {\n    product: productReducer,\n    user: userReducer\n  },\n  initialState: {\n    product: {},\n    user: {}\n  }\n});\n")),(0,o.kt)("p",null,"See how the initial state is available in a feature reducer:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Action, Store, configureStore } from 'mini-rx-store';\n\ninterface CounterState {\n  count: number;\n}\n\n// Reducer\nfunction counterReducer(state: CounterState, action: Action): CounterState {\n  switch (action.type) {\n    case 'inc':\n      return {\n        ...state,\n        count: state.count + 1\n      };\n    default:\n      return state;\n  }\n}\n\n// Configure the store\nconst store: Store = configureStore({\n  reducers: {\n    counter: counterReducer\n  },\n  initialState: {\n    counter: {count: 123} \n  }\n});\n\n// Select global state\nstore.select(state => state).subscribe(console.log);\n// OUTPUT: {'counter':{'count':123}}\n\n// Dispatch the 'increment' action\nstore.dispatch({ type: 'inc' });\n// OUTPUT: {'counter':{'count':124}}\n")),(0,o.kt)("h2",{id:"meta-reducers"},"Meta reducers"),(0,o.kt)("p",null,'Meta reducers are executed before the "normal" feature reducers.\nWith meta reducers we can pre-process actions and state.'),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Most MiniRx Extensions like the Undo Extension, Logger Extension or the Immutable Extension are implemented with a meta reducer.")),(0,o.kt)("p",null,"A meta reducer is a function which takes a reducer and returns a new reducer."),(0,o.kt)("p",null,"Let's see how to implement a simple Debug meta reducer:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export function debug(reducer) {\n  return function newReducer(state, action) {\n    const nextState = reducer(state, action);\n    console.log('state', state);\n    console.log('action', action);\n    console.log('next state', nextState);\n    return nextState;\n  }\n}\n")),(0,o.kt)("p",null,"Now we can add the ",(0,o.kt)("inlineCode",{parentName:"p"},"debug")," meta reducer to the ",(0,o.kt)("inlineCode",{parentName:"p"},"metaReducers")," array of the configuration object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const store: Store = configureStore({\n  // reducers: {...},\n  // initialState: {...},\n  metaReducers: [debug]\n});\n")),(0,o.kt)("p",null,'You can add many meta reducers to the array. The meta reducers will be executed from "left to right".'))}d.isMDXComponent=!0}}]);