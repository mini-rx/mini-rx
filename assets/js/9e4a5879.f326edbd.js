"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[811],{1684:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>l,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"redux-setup","title":"Redux Setup","description":"With configureStore we get hold of the global store object.","source":"@site/docs/redux-setup.md","sourceDirName":".","slug":"/redux-setup","permalink":"/docs/redux-setup","draft":false,"unlisted":false,"editUrl":"https://github.com/spierala/mini-rx-store/edit/master/docs/docs/redux-setup.md","tags":[],"version":"current","frontMatter":{"id":"redux-setup","title":"Redux Setup"},"sidebar":"docs","previous":{"title":"Quick Start","permalink":"/docs/redux"},"next":{"title":"Actions","permalink":"/docs/actions"}}');var o=n(4848),c=n(8453);const s={id:"redux-setup",title:"Redux Setup"},i=void 0,a={},d=[{value:"<code>configureStore</code>",id:"configurestore",level:2},{value:"Feature Reducers",id:"feature-reducers",level:2},{value:"Add Feature Reducers dynamically",id:"add-feature-reducers-dynamically",level:3},{value:"Initial State",id:"initial-state",level:2},{value:"Meta reducers",id:"meta-reducers",level:2}];function u(e){const t={admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["With ",(0,o.jsx)(t.code,{children:"configureStore"})," we get hold of the global store object.\nAt the same time we can pass a configuration to initialize our feature reducers, meta reducers, initial state and extensions."]}),"\n",(0,o.jsx)(t.h2,{id:"configurestore",children:(0,o.jsx)(t.code,{children:"configureStore"})}),"\n",(0,o.jsx)(t.p,{children:"At first, we do not need any configuration to get started."}),"\n",(0,o.jsx)(t.p,{children:"Let`s just get hold of the store instance:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"import { configureStore, Store } from 'mini-rx-store';\n\nconst store: Store = configureStore({});\n"})}),"\n",(0,o.jsxs)(t.p,{children:["With the ",(0,o.jsx)(t.code,{children:"Store"})," instance we can already add reducers (dynamically), select state, dispatch actions and create effects."]}),"\n",(0,o.jsx)(t.h2,{id:"feature-reducers",children:"Feature Reducers"}),"\n",(0,o.jsx)(t.p,{children:"We can configure the feature reducers via the configuration object. The reducers will be ready at store initialization."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"import { configureStore, Store } from 'mini-rx-store';\nimport productReducer from './product-reducer';\nimport userReducer from './user-reducer';\n\nconst store: Store = configureStore({\n  reducers: {\n    product: productReducer,\n    user: userReducer\n  }\n});\n"})}),"\n",(0,o.jsx)(t.h3,{id:"add-feature-reducers-dynamically",children:"Add Feature Reducers dynamically"}),"\n",(0,o.jsx)(t.p,{children:"It is possible to add feature reducers dynamically later like this:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"import todoReducer from './todo-reducer';\n\nstore.feature('todo', todoReducer);\n"})}),"\n",(0,o.jsx)(t.h2,{id:"initial-state",children:"Initial State"}),"\n",(0,o.jsx)(t.p,{children:"We can set the initial state of the store via the configuration object. The initial state keys must match the provided reducer keys:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"import { configureStore, Store } from 'mini-rx-store';\nimport { productReducer } from './product-reducer';\nimport { userReducer } from './user-reducer';\n\nconst store: Store = configureStore({\n  reducers: {\n    product: productReducer,\n    user: userReducer\n  },\n  initialState: {\n    product: {},\n    user: {}\n  }\n});\n"})}),"\n",(0,o.jsx)(t.p,{children:"See how the initial state is available in a feature reducer:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"import { Action, Store, configureStore } from 'mini-rx-store';\n\ninterface CounterState {\n  count: number;\n}\n\n// Reducer\nfunction counterReducer(state: CounterState, action: Action): CounterState {\n  switch (action.type) {\n    case 'inc':\n      return {\n        ...state,\n        count: state.count + 1\n      };\n    default:\n      return state;\n  }\n}\n\n// Configure the store\nconst store: Store = configureStore({\n  reducers: {\n    counter: counterReducer\n  },\n  initialState: {\n    counter: {count: 123} \n  }\n});\n\n// Select global state\nstore.select(state => state).subscribe(console.log);\n// OUTPUT: {'counter':{'count':123}}\n\n// Dispatch the 'increment' action\nstore.dispatch({ type: 'inc' });\n// OUTPUT: {'counter':{'count':124}}\n"})}),"\n",(0,o.jsx)(t.h2,{id:"meta-reducers",children:"Meta reducers"}),"\n",(0,o.jsx)(t.p,{children:'Meta reducers are executed before the "normal" feature reducers.\nWith meta reducers we can pre-process actions and state.'}),"\n",(0,o.jsx)(t.admonition,{type:"info",children:(0,o.jsx)(t.p,{children:"Most MiniRx Extensions like the Undo Extension, Logger Extension or the Immutable Extension are implemented with a meta reducer."})}),"\n",(0,o.jsx)(t.p,{children:"A meta reducer is a function which takes a reducer and returns a new reducer."}),"\n",(0,o.jsx)(t.p,{children:"Let's see how to implement a simple Debug meta reducer:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"export function debug(reducer) {\n  return function newReducer(state, action) {\n    const nextState = reducer(state, action);\n    console.log('state', state);\n    console.log('action', action);\n    console.log('next state', nextState);\n    return nextState;\n  }\n}\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Now we can add the ",(0,o.jsx)(t.code,{children:"debug"})," meta reducer to the ",(0,o.jsx)(t.code,{children:"metaReducers"})," array of the configuration object:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"const store: Store = configureStore({\n  // reducers: {...},\n  // initialState: {...},\n  metaReducers: [debug]\n});\n"})}),"\n",(0,o.jsx)(t.p,{children:'You can add many meta reducers to the array. The meta reducers will be executed from "left to right".'})]})}function l(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var r=n(6540);const o={},c=r.createContext(o);function s(e){const t=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(c.Provider,{value:t},e.children)}}}]);