"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[760],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,f=m["".concat(s,".").concat(d)]||m[d]||p[d]||a;return n?o.createElement(f,l(l({ref:t},u),{},{components:n})):o.createElement(f,l({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var c=2;c<a;c++)l[c]=n[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7890:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var o=n(7462),r=(n(7294),n(3905));const a={id:"fs-config",title:"Local Component State",sidebar_label:"Local Component State",slug:"/local-component-state"},l=void 0,i={unversionedId:"fs-config",id:"fs-config",title:"Local Component State",description:"With MiniRx Feature Stores you can also manage local component state.",source:"@site/docs/fs-config.md",sourceDirName:".",slug:"/local-component-state",permalink:"/docs/local-component-state",draft:!1,editUrl:"https://github.com/spierala/mini-rx-store/edit/master/docs/docs/fs-config.md",tags:[],version:"current",frontMatter:{id:"fs-config",title:"Local Component State",sidebar_label:"Local Component State",slug:"/local-component-state"},sidebar:"docs",previous:{title:"Effects",permalink:"/docs/effects-for-feature-store"},next:{title:"Quick Start",permalink:"/docs/ext-quick-start"}},s={},c=[{value:"What is local component state?",id:"what-is-local-component-state",level:3},{value:"Multiple Feature Store instances",id:"multiple-feature-store-instances",level:3},{value:"Destroy",id:"destroy",level:2},{value:"Destroy in Svelte",id:"destroy-in-svelte",level:3},{value:"Automatic destroy in Angular",id:"automatic-destroy-in-angular",level:3},{value:"Destroy in other frameworks",id:"destroy-in-other-frameworks",level:3}],u={toc:c};function p(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,o.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"With MiniRx Feature Stores you can also manage ",(0,r.kt)("strong",{parentName:"p"},"local component state"),"."),(0,r.kt)("h3",{id:"what-is-local-component-state"},"What is local component state?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"State which is bound to a component"),(0,r.kt)("li",{parentName:"ul"},"State which has the lifespan of a component"),(0,r.kt)("li",{parentName:"ul"},"State which can exist multiple times (if the corresponding component exists multiple times)")),(0,r.kt)("h3",{id:"multiple-feature-store-instances"},"Multiple Feature Store instances"),(0,r.kt)("p",null,"By default, a Feature Store with a certain feature key can only be created ",(0,r.kt)("strong",{parentName:"p"},"once"),".\nBut in order to manage local component state, you might need to create ",(0,r.kt)("strong",{parentName:"p"},"multiple")," instances of the same Feature Store."),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"{multi: true}")," configuration to allow multiple instances."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Observable } from 'rxjs';\nimport { FeatureStore } from 'mini-rx-store';\n\ninterface CounterState {\n  count: number;\n}\n\nconst initialState: CounterState = {\n  count: 42,\n};\n\nexport class CounterStore extends FeatureStore<CounterState> {\n  count$: Observable<number> = this.select((state) => state.count);\n\n  constructor() {\n    super('counter', initialState, { multi: true });\n  }\n\n  increment() {\n    this.setState({ count: this.state.count + 1 }, 'increment');\n  }\n\n  decrement() {\n    this.setState({ count: this.state.count - 1 }, 'decrement');\n  }\n}\n")),(0,r.kt)("p",null,"The code above defines a CounterStore with the ",(0,r.kt)("inlineCode",{parentName:"p"},"{multi: true}")," configuration.\nNow you can create many instances of the CounterStore."),(0,r.kt)("p",null,"In the following screenshot from the ",(0,r.kt)("a",{parentName:"p",href:"https://angular-demo.mini-rx.io/#/counter"},"Angular Demo"),' you can see many Counter components.\nThe Redux DevTools indicate that MiniRx created four "counter" Feature Stores with unique feature keys.'),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Redux DevTools for MiniRx",src:n(5045).Z,width:"1082",height:"514"})),(0,r.kt)("h2",{id:"destroy"},"Destroy"),(0,r.kt)("p",null,"When the component is destroyed, then you most likely want to destroy the corresponding Feature Store as well. "),(0,r.kt)("p",null,"For that reason, ",(0,r.kt)("inlineCode",{parentName:"p"},"FeatureStore")," exposes the ",(0,r.kt)("inlineCode",{parentName:"p"},"destroy")," method. "),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"destroy")," method does two things:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"clean up all internal Observable subscriptions (e.g. from effects)"),(0,r.kt)("li",{parentName:"ul"},"remove the corresponding feature state from the global state object")),(0,r.kt)("h3",{id:"destroy-in-svelte"},"Destroy in Svelte"),(0,r.kt)("p",null,"Example: Call ",(0,r.kt)("inlineCode",{parentName:"p"},"destroy")," manually in Svelte"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Observable } from 'rxjs';\nimport { FeatureStore } from 'mini-rx-store';\nimport { onDestroy } from 'svelte';\n\ninterface CounterState {\n  count: number;\n}\n\nconst initialState: CounterState = {\n  count: 42,\n};\n\nexport class CounterStore extends FeatureStore<CounterState> {\n  constructor() {\n    super('counter', initialState, {multi: true});\n    \n    onDestroy(() => {\n        this.destroy();\n    });\n  }\n}\n")),(0,r.kt)("p",null,"See the source from the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/spierala/mini-rx-svelte-demo/blob/master/frontend/src/modules/counter/components/state/counter-store.ts"},"MiniRx Svelte Demo"),"."),(0,r.kt)("h3",{id:"automatic-destroy-in-angular"},"Automatic destroy in Angular"),(0,r.kt)("p",null,"In Angular, you can provide a Feature Store on component level in the ",(0,r.kt)("inlineCode",{parentName:"p"},"@Component")," decorator like this: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"\nimport { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CounterStore } from '../state/counter-store.service';\n\n@Component({\n  selector: 'app-counter',\n  templateUrl: './counter.component.html',\n  styleUrls: ['./counter.component.css'],\n  providers: [CounterStore], // The CounterStore is provided for each counter component instance\n})\nexport class CounterComponent {\n  constructor(private counterStore: CounterStore) {}\n}\n")),(0,r.kt)("p",null,"Now, the lifespan of the CounterStore is bound to the component lifespan.\nAngular will instantiate a CounterStore when a CounterComponent is created.\nAngular will also call the Feature Store ",(0,r.kt)("inlineCode",{parentName:"p"},"destroy")," method for us when the component is destroyed."),(0,r.kt)("p",null,"The CounterStore itself is just an Angular Injectable (without the ",(0,r.kt)("inlineCode",{parentName:"p"},"providedIn")," config):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"@Injectable()\nexport class CounterStore extends FeatureStore<CounterState> {\n  constructor() {\n    super('counter', initialState, { multi: true });\n  }\n}\n")),(0,r.kt)("p",null,"See the source from the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/spierala/mini-rx-store/blob/master/apps/mini-rx-angular-demo/src/app/modules/counter/state/counter-store.service.ts"},"MiniRx Angular Demo"),"."),(0,r.kt)("h3",{id:"destroy-in-other-frameworks"},"Destroy in other frameworks"),(0,r.kt)("p",null,"In other frameworks (or without a framework) you have to call the ",(0,r.kt)("inlineCode",{parentName:"p"},"destroy")," method manually, when the corresponding component is destroyed."))}p.isMDXComponent=!0},5045:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/local-component-state-mini-rx-eb1418884ec1383a4f0ca787ded4db58.png"}}]);