"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[132],{3352:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"fs-effect","title":"Effects","description":"effect offers an advanced way to trigger side effects (e.g. API calls) for a Feature Store.","source":"@site/docs/fs-effect.md","sourceDirName":".","slug":"/effects-for-feature-store","permalink":"/docs/effects-for-feature-store","draft":false,"unlisted":false,"editUrl":"https://github.com/spierala/mini-rx-store/edit/master/docs/docs/fs-effect.md","tags":[],"version":"current","frontMatter":{"id":"fs-effect","title":"Effects","sidebar_label":"Effects","slug":"/effects-for-feature-store"},"sidebar":"docs","previous":{"title":"Select","permalink":"/docs/select-feature-state"},"next":{"title":"Local Component State","permalink":"/docs/fs-config"}}');var o=n(4848),r=n(8453);const a={id:"fs-effect",title:"Effects",sidebar_label:"Effects",slug:"/effects-for-feature-store"},i=void 0,c={},d=[{value:"Trigger the effect with an Observable",id:"trigger-the-effect-with-an-observable",level:3},{value:"<code>tapResponse</code>",id:"tapresponse",level:2}];function l(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"effect"})," offers an advanced way to trigger side effects (e.g. API calls) for a Feature Store.\nWhen the side effect completed, we can update feature state straight away (by using ",(0,o.jsx)(t.code,{children:"setState()"}),")."]}),"\n",(0,o.jsxs)(t.p,{children:["Using ",(0,o.jsx)(t.code,{children:"effect"})," has the following benefits:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"you can more easily handle race conditions with RxJS flattening operators (e.g. switchMap, concatMap)"}),"\n",(0,o.jsx)(t.li,{children:"the subscriptions are created internally and cleaned up as soon as the Feature Store is destroyed"}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"Example:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",metastring:'title="todo-feature-store.ts"',children:"import { EMPTY, pipe } from 'rxjs';\nimport { catchError, mergeMap, tap } from 'rxjs/operators';\nimport { ajax } from 'rxjs/ajax';\n\nloadTodos = this.effect<void>(\n  pipe(\n    mergeMap(() =>\n      ajax('https://jsonplaceholder.typicode.com/todos').pipe(\n        tap((res) => this.setState({ todos: res.response })),\n        catchError((err) => {\n          console.error(err);\n          return EMPTY;\n        })\n      )\n    )\n  )\n);\n\n// Effect using the payload value\nloadTodoById = this.effect<number>(\n  pipe(\n    mergeMap((id) =>\n      ajax('https://jsonplaceholder.typicode.com/todos?id=' + id).pipe(\n        tap((res) => this.setState({ todos: res.response })),\n        catchError((err) => {\n          console.error(err);\n          return EMPTY;\n        })\n      )\n    )\n  )\n);\n\n// Start the effects\nthis.loadTodos();\nthis.loadTodoById(5);\n"})}),"\n",(0,o.jsxs)(t.p,{children:["The code above creates two effects for fetching todos from an API.\n",(0,o.jsx)(t.code,{children:"effect"})," returns a function which can be called later to start the effect with an optional payload (see ",(0,o.jsx)(t.code,{children:"this.loadTodoById(5)"}),")."]}),"\n",(0,o.jsxs)(t.p,{children:["Inside the RxJS standalone ",(0,o.jsx)(t.code,{children:"pipe"})," we can define how to handle the side effect.\nWith RxJS flattening operators (mergeMap, switchMap, concatMap, exhaustMap) we can take care of race conditions\n(e.g. if you trigger the same API call within a short period of time)."]}),"\n",(0,o.jsxs)(t.p,{children:["Inside the RxJS ",(0,o.jsx)(t.code,{children:"tap"})," and ",(0,o.jsx)(t.code,{children:"catchError"})," operators we can call ",(0,o.jsx)(t.code,{children:"this.setState()"})," to update state."]}),"\n",(0,o.jsxs)(t.admonition,{type:"danger",children:[(0,o.jsxs)(t.p,{children:["It is important to handle possible API errors with ",(0,o.jsx)(t.code,{children:"catchError"})," to make sure that the effect source does not complete. Otherwise, the effect will not work anymore."]}),(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"tapResponse"})," operator will help you to enforce error handling with less boilerplate.\n",(0,o.jsx)(t.a,{href:"/docs/effects-for-feature-store#tapresponse",children:"Read more about tapResponse"}),"."]})]}),"\n",(0,o.jsxs)(t.admonition,{type:"info",children:[(0,o.jsxs)(t.p,{children:["We can skip the RxJS standalone ",(0,o.jsx)(t.code,{children:"pipe"})," if we use only one RxJS operator:"]}),(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"loadTodoById = this.effect<number>(\n  mergeMap((id) =>\n    ajax('https://jsonplaceholder.typicode.com/todos?id=' + id).pipe(\n      // ...\n    )\n  )\n);\n"})})]}),"\n",(0,o.jsx)(t.h3,{id:"trigger-the-effect-with-an-observable",children:"Trigger the effect with an Observable"}),"\n",(0,o.jsx)(t.p,{children:"We demonstrated already how to trigger an effect imperatively, like this:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"this.loadTodos();\nthis.loadTodoById(5);\n"})}),"\n",(0,o.jsx)(t.p,{children:"Alternatively you can trigger the effect also with an Observable:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"loadTodosTrigger$ = timer(0, 1000);\n\n// Adjust the generic type of effect to support the RxJS timer return type (number)\nloadTodos = this.effect<void | number>(\n    // ...\n);\n\n// Trigger the effect with an Observable\nthis.loadTodos(loadTodosTrigger$); // The todos will be fetched every second\n\n// You can still trigger imperatively whenever you want\nthis.loadTodos();\n"})}),"\n",(0,o.jsx)(t.h2,{id:"tapresponse",children:(0,o.jsx)(t.code,{children:"tapResponse"})}),"\n",(0,o.jsxs)(t.p,{children:["When using ",(0,o.jsx)(t.code,{children:"effect"})," it is important to handle possible errors (e.g. when the API call fails).\nThe ",(0,o.jsx)(t.code,{children:"tapResponse"})," operator enforces to handle the error case and reduces boilerplate."]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"tapResponse"})," is a thin wrapper around RxJS ",(0,o.jsx)(t.code,{children:"tap"})," and ",(0,o.jsx)(t.code,{children:"catchError"}),"."]}),"\n",(0,o.jsx)(t.p,{children:"Example:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",metastring:'title="todo-feature-store.ts"',children:"import { tapResponse } from 'mini-rx-store';\n\nloadTodos = this.effect<void>(\n  pipe(\n    mergeMap(() =>\n      ajax('https://jsonplaceholder.typicode.com/todos').pipe(\n        tapResponse(\n          (res) => this.setState({ todos: res.response }),\n          (err) => console.error(err)\n        )\n      )\n    )\n  )\n);\n"})}),"\n",(0,o.jsx)(t.admonition,{type:"info",children:(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"tapResponse"})," accepts an optional third parameter for handling the ",(0,o.jsx)(t.code,{children:"finalize"})," case.\nFor example, it could be used to set a loading state to ",(0,o.jsx)(t.code,{children:"false"})," if the API call succeeds ",(0,o.jsx)(t.strong,{children:"or"})," fails."]})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var s=n(6540);const o={},r=s.createContext(o);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);