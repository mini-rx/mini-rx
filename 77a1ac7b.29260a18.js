(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{100:function(e,t,r){"use strict";r.d(t,"a",(function(){return f})),r.d(t,"b",(function(){return b}));var n=r(0),a=r.n(n);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=a.a.createContext({}),l=function(e){var t=a.a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},f=function(e){var t=l(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),f=l(r),u=n,b=f["".concat(c,".").concat(u)]||f[u]||d[u]||o;return r?a.a.createElement(b,i(i({ref:t},p),{},{components:r})):a.a.createElement(b,i({ref:t},p))}));function b(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,c=new Array(o);c[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:n,c[1]=i;for(var p=2;p<o;p++)c[p]=r[p];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},82:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return c})),r.d(t,"metadata",(function(){return i})),r.d(t,"toc",(function(){return s})),r.d(t,"default",(function(){return l}));var n=r(3),a=r(7),o=(r(0),r(100)),c={id:"fs-effect",title:"Effects",sidebar_label:"Effects",slug:"/effects-for-feature-store"},i={unversionedId:"fs-effect",id:"fs-effect",isDocsHomePage:!1,title:"Effects",description:"effect offers a simple way to trigger side effects (e.g. API calls) for a FeatureStore.",source:"@site/docs/fs-effect.md",slug:"/effects-for-feature-store",permalink:"/mini-rx-store/docs/effects-for-feature-store",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/fs-effect.md",version:"current",sidebar_label:"Effects",sidebar:"docs",previous:{title:"Select State",permalink:"/mini-rx-store/docs/select-feature-state"},next:{title:"Extensions",permalink:"/mini-rx-store/docs/ext-quick-start"}},s=[],p={toc:s};function l(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},p,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"effect")," offers a simple way to trigger side effects (e.g. API calls) for a FeatureStore.\nWhen the side effect completed we can update feature state straight away (by using ",Object(o.b)("inlineCode",{parentName:"p"},"setState()"),")."),Object(o.b)("p",null,"Example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todo-feature-store.ts"',title:'"todo-feature-store.ts"'}),'import { EMPTY } from "rxjs";\nimport { catchError, mergeMap, tap } from "rxjs/operators";\nimport { ajax } from "rxjs/ajax";\n\nloadTodos = this.effect(payload$ => {\n    return payload$.pipe(\n        mergeMap(() =>\n            ajax("https://jsonplaceholder.typicode.com/todos").pipe(\n                tap(res => this.setState({todos: res.response})),\n                catchError(err => EMPTY)\n            )\n        )\n    );\n});\n\n// Effect using the payload value\nloadTodoById = this.effect<number>(payload$ => {\n    return payload$.pipe(\n        mergeMap((id) =>\n            ajax("https://jsonplaceholder.typicode.com/todos?id=" + id).pipe(\n                tap(res => this.setState({todos: res.response})),\n                catchError(err => EMPTY)\n            )\n        )\n    );\n});\n\n// Start the effects\nthis.loadTodos();\nthis.loadTodoById(5);\n')),Object(o.b)("p",null,"The code above creates an Effect for ",Object(o.b)("em",{parentName:"p"},"fetching the todos"),".\nThe API call is the side effect which needs to be performed.\n",Object(o.b)("inlineCode",{parentName:"p"},"effect")," returns a function which can be called later to start the Effect with an optional payload (see ",Object(o.b)("inlineCode",{parentName:"p"},"this.loadTodoById(5)"),")."),Object(o.b)("p",null,"Inside the ",Object(o.b)("inlineCode",{parentName:"p"},"payload$.pipe")," we can define how to handle the side effect.\nWith RxJS flattening operators (mergeMap, switchMap, concatMap, exhaustMap) we can easily define how to treat race conditions (e.g. if you trigger a lot of API calls at the same time)."),Object(o.b)("p",null,"Inside the RxJS ",Object(o.b)("inlineCode",{parentName:"p"},"tap")," and ",Object(o.b)("inlineCode",{parentName:"p"},"catchError")," operators we can call ",Object(o.b)("inlineCode",{parentName:"p"},"this.setState()")," to update state."),Object(o.b)("p",null,"\u2139\ufe0f It is important to handle possible API errors with ",Object(o.b)("inlineCode",{parentName:"p"},"catchError")," to make sure that the ",Object(o.b)("inlineCode",{parentName:"p"},"payload$")," stream does not die."),Object(o.b)("p",null,"\u2139\ufe0f We can skip the ",Object(o.b)("inlineCode",{parentName:"p"},"payload$.pipe")," if we use only one RxJS operator:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),'loadTodoById = this.effect<number>(\n    mergeMap((id) =>\n        ajax("https://jsonplaceholder.typicode.com/todos?id=" + id).pipe(\n            tap(res => this.setState({todos: res.response})),\n            catchError(err => EMPTY)\n        )\n    )\n);\n')))}l.isMDXComponent=!0}}]);