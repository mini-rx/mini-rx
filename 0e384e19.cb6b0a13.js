(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{100:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=r.a.createContext({}),l=function(e){var t=r.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},b=function(e){var t=l(e.components);return r.a.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),b=l(n),d=a,m=b["".concat(c,".").concat(d)]||b[d]||p[d]||o;return n?r.a.createElement(m,i(i({ref:t},u),{},{components:n})):r.a.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var u=2;u<o;u++)c[u]=n[u];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},63:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return l}));var a=n(3),r=n(7),o=(n(0),n(100)),c={id:"intro",title:"Quick Start",sidebar_label:"Quick Start",slug:"/intro"},i={unversionedId:"intro",id:"intro",isDocsHomePage:!1,title:"Quick Start",description:"Purpose",source:"@site/docs/intro.md",slug:"/intro",permalink:"/mini-rx-store/docs/intro",editUrl:"https://github.com/spierala/mini-rx-store/edit/master/docs/docs/intro.md",version:"current",sidebar_label:"Quick Start",sidebar:"docs",next:{title:"Installation",permalink:"/mini-rx-store/docs/"}},s=[{value:"Purpose",id:"purpose",children:[]},{value:"What&#39;s Included",id:"whats-included",children:[]},{value:"Key Concepts",id:"key-concepts",children:[]},{value:"Basic Tutorial",id:"basic-tutorial",children:[{value:"Store (Redux API)",id:"store-redux-api",children:[]},{value:"Feature Store API",id:"feature-store-api",children:[]}]},{value:"Demos",id:"demos",children:[]}],u={toc:s};function l(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"purpose"},"Purpose"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"MiniRx Store")," provides Reactive State Management for Javascript Applications inspired by ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://redux.js.org/"}),"Redux"),".\nIt is a global, application-wide solution to manage state and is powered by ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://rxjs.dev/"}),"RxJS"),"."),Object(o.b)("h2",{id:"whats-included"},"What's Included"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"RxJS powered global state management"),Object(o.b)("li",{parentName:"ul"},"State and Actions are exposed as RxJS Observable"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"redux"}),"Store (Redux API)"),":",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"Actions"),Object(o.b)("li",{parentName:"ul"},"Reducers"),Object(o.b)("li",{parentName:"ul"},"Meta Reducers"),Object(o.b)("li",{parentName:"ul"},"Memoized Selectors"),Object(o.b)("li",{parentName:"ul"},"Effects"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"ts-action"}),"Support for ts-action"),": Create and consume actions with as little boilerplate as possible"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"fs-quick-start"}),"FeatureStore"),": Update state without actions and reducers:",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"setState()")," update the feature state"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"select()")," read feature state"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"effect()")," run side effects like API calls and update feature state"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"undo()")," easily undo setState actions"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"ext-quick-start"}),"Extensions"),":",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"Redux Dev Tools Extension: Inspect State with the Redux Dev Tools"),Object(o.b)("li",{parentName:"ul"},"Immutable Extension: Enforce immutability"),Object(o.b)("li",{parentName:"ul"},"Undo Extension: Undo dispatched Actions"),Object(o.b)("li",{parentName:"ul"},"Logger Extension: console.log the current action and updated state"))),Object(o.b)("li",{parentName:"ul"},"Framework agnostic: MiniRx works with any front-end project built with JavaScript or TypeScript (Angular, Svelte, React, Vue, or anything else)"),Object(o.b)("li",{parentName:"ul"},"TypeScript support: The MiniRx API comes with TypeScript type definitions"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"angular"}),"Angular Integration"),": Use MiniRx Store the Angular way: ",Object(o.b)("inlineCode",{parentName:"li"},"StoreModule.forRoot()"),", ",Object(o.b)("inlineCode",{parentName:"li"},"StoreModule.forFeature()"),", ...")),Object(o.b)("h2",{id:"key-concepts"},"Key Concepts"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"State is exposed as RxJS Observable"),Object(o.b)("li",{parentName:"ul"},'State has a flat hierarchy and is devided into "features" (also called "slices" in Redux world)'),Object(o.b)("li",{parentName:"ul"},'For each "feature" we can decide to use the ',Object(o.b)("strong",{parentName:"li"},"Redux API")," with actions and reducers or the ",Object(o.b)("strong",{parentName:"li"},"FeatureStore API")," with ",Object(o.b)("inlineCode",{parentName:"li"},"setState")),Object(o.b)("li",{parentName:"ul"},"State is read-only and can only be changed by dispatching actions (Redux API) or by using setState (FeatureStore)")),Object(o.b)("h2",{id:"basic-tutorial"},"Basic Tutorial"),Object(o.b)("p",null,"Let's dive into some code to see MiniRx in action"),Object(o.b)("h3",{id:"store-redux-api"},"Store (Redux API)"),Object(o.b)("p",null,"MiniRx supports the classic Redux API with registering reducers and dispatching Actions.\nObservable state can be selected with memoized selectors."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),'import { Action, Store, configureStore, createFeatureSelector, createSelector } from "mini-rx-store";\nimport { Observable } from "rxjs";\n\n// 1.) State interface\ninterface CounterState {\n  count: number;\n}\n\n// 2.) Initial state\nconst counterInitialState: CounterState = {\n  count: 1\n};\n\n// 3.) Reducer\nfunction counterReducer(\n  state: CounterState = counterInitialState,\n  action: Action\n): CounterState {\n  switch (action.type) {\n    case "inc":\n      return {\n        ...state,\n        count: state.count + 1\n      };\n    default:\n      return state;\n  }\n}\n\n// 4.) Get hold of the store instance and register root reducers\nconst store: Store = configureStore({\n  reducers: {\n    counter: counterReducer\n  }\n});\n\n// 5.) Create memoized selectors\nconst getCounterFeatureState = createFeatureSelector<CounterState>("counter");\nconst getCount = createSelector(\n  getCounterFeatureState,\n  state => state.count\n);\n\n// 6.) Select state as RxJS Observable\nconst count$: Observable<number> = store.select(getCount);\ncount$.subscribe(count => console.log(\'count:\', count));\n\n// 7.) Dispatch an action\nstore.dispatch({ type: "inc" });\n\n// OUTPUT: count: 1\n// OUTPUT: count: 2\n')),Object(o.b)("h3",{id:"feature-store-api"},"Feature Store API"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"FeatureStore")," allows us to manage feature state without actions and reducers.\nThe API of a FeatureStore is optimized to select and update a feature state directly with a minimum of boilerplate."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:'title="counter-feature-store.ts"',title:'"counter-feature-store.ts"'}),'import { FeatureStore } from "mini-rx-store";\nimport { Observable } from "rxjs";\n\n// 1.) State interface\ninterface CounterState {\n  counter: number;\n}\n\n// 2.) Initial state\nconst counterInitialState: CounterState = {\n  counter: 11\n};\n\nexport class CounterFeatureStore extends FeatureStore<CounterState> {\n\n  // Select state as RxJS Observable\n  counter$: Observable<number> = this.select(state => state.counter);\n\n  constructor() {\n    super(\'counterFs\', counterInitialState)\n  }\n\n  // Update state with `setState`\n  inc() {\n    this.setState(state => ({...state, counter: state.counter + 1}))\n  }\n}\n')),Object(o.b)("p",null,'Use the "counterFs" feature store like this:'),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { CounterFeatureStore } from \"./counter-feature-store\";\n\nconst counterFs = new CounterFeatureStore();\ncounterFs.counter$.subscribe(count => console.log('count:', count));\ncounterFs.inc();\n\n// OUTPUT: count: 11\n// OUTPUT: count: 12\n")),Object(o.b)("div",{className:"admonition admonition-info alert alert--info"},Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},Object(o.b)("strong",{parentName:"p"},"The FeatureStore states become part of the global state too.")),Object(o.b)("p",{parentName:"div"},"Both the Redux feature state and the FeatureStore state are living next to each other in the global state object:"),Object(o.b)("pre",{parentName:"div"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),'store.select(state => state).subscribe(console.log);\n\n//OUTPUT: {"counter":{"count":2},"counterFs":{"counter":12}}\n')))),Object(o.b)("h2",{id:"demos"},"Demos"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://stackblitz.com/edit/mini-rx-angular-todos?file=src%2Fapp%2Fmodules%2Ftodo%2Fservices%2Ftodos-state.service.ts"}),"Todos App using FeatureStore")),Object(o.b)("li",{parentName:"ul"},"Coming soon: Redux Demo")))}l.isMDXComponent=!0}}]);